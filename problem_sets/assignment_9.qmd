---
title: "assignment_9"
format: gfm
editor: visual
---

# **Assignment 9: Functions and factors**

## **Instructions: Please read through this before you begin**

-   To start, first load all the required packages with the following code. Install them if they are not installed yet.

```{r, message = FALSE, warning = FALSE}
library(tidyverse)
library(knitr)
```

**Acknowledgements:** Exercises 1 and 2 were adapted (with permission) from Iain Carmichael’s course [STOR 390: Introduction to Data Science](https://idc9.github.io/stor390/#course_material).

## **Exercise 1: Unit converter**

**1.1 Write a function that can convert Fahrenheit to Celsius**, based on the following fomula: `C = (F - 32) * 5 / 9`

Take your function for a spin, does it return the correct values?

32 F = 0 C

```{r}
#Function
fahrenheit_to_celsius <- function(F) {
  C <- (F - 32) * 5 / 9
  return(C)
}

#Test
fahrenheit_to_celsius(32)   
fahrenheit_to_celsius(50)    
fahrenheit_to_celsius(212)   

```

**1.2** A student came from ‘tropical Canada’. She doesn’t like the cold but she really didn’t like it when it’s hot. Although she wanted to know what the temperature is in Celsius when the US weather channel reported it in Fahrenheit, there are certain points at which it was just too cold or too hot for to to care about the exact value. **Modify the f_to_c function below to print the following**, and check if your function works properly using the input of **-10 F, 60 F, and 90 F**.

-   If the temperature is less than -20 C, print “Don’t bother going out.”

-   If the temperature is greater than 30 C, print “I’m moving back to Canada.”

-   If the temperature is between -20 C and 30 C, print the temperature in Celsius.

The following is how it should work:

```{r}
#Function
f_to_c_message <- function(F) {
  C <- (F - 32) * 5 / 9
  if (C < -20) {
    return("Don't bother going out.")
  } else if (C > 30) {
    return("I'm moving back to Canada.")
  } else {
    return(C)
  }
}

#Test
f_to_c_message(-10)
f_to_c_message(60)
f_to_c_message(90)

```

## **Exercise 2: Set operation**

The R function `setdiff(x,y)` returns the elements of a vector x that are not in y. For example, say x is a list of singers who can reach very high registers, and y is a list of musicians who died in 2016. `setdiff(x, y)` would return a list of singers with high voices who did not die in 2016.

```{r}
x <- c("prince", "mj", "sam cook", "whitney", "dolly")
y <- c("sharon jones", "prince", "bowie", "leonard cohen", "phife dawg")
setdiff(x,y)
```

However, sometimes you want a function to return the elements that are in x or y but not both. Here, **write such a function**, and use your custom function to **find the names of singers who either have high voices, but did not die in 2016, OR who died in 2016 but do not have high voices.**

Your function will need to work for any vectors, not just the ones in this example. The output should be a single vector, not two vectors.

**Hint**: you will need R’s [set operations](https://stat.ethz.ch/R-manual/R-devel/library/base/html/sets.html).

```{r}
x <- c("prince", "mj", "sam cook", "whitney", "dolly")
y <- c("sharon jones", "prince", "bowie", "leonard cohen", "phife dawg")

unique_element <- function(x, y) { 
  setdiff(union(x, y), intersect(x, y))
}

unique_element(x, y)



```

## **Exercise 3: Fuel Efficiency of Car Models**

This exercise uses the `mtcars` dataset, which is available in base R. It was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). Let’s first convert `mtcars` to tibble format such that the row names become a column named “model”.

```{r}
mtcars_tbl <- as_tibble(mtcars, rownames = "model")
mtcars_tbl |> 
  head() |> 
  kable()
```

From `mtcars_tbl`, reproduce the following plot, which shows the miles per gallon (`mpg`) of car models on the x axis (see hints below). Different models are ordered on the y axis according to their `mpg` and their names are shown next to the data points. Also, the size of each data point maps to its horse power (`hp`), and the color maps to number of cylinders (`cyl`).

```{r}
library(tidyverse)

# Convert to tibble and reorder model by mpg
mtcars_tbl <- as_tibble(mtcars, rownames = "model") |>
  mutate(model = fct_reorder(model, mpg), cyl = as_factor(cyl))

# Plot
ggplot(mtcars_tbl, mapping = aes(x = mpg, y = model)) +
  geom_point(aes(size = hp, color = cyl)) +
  geom_text(aes(label = model), hjust = -0.1, size = 3) +
  xlim(10, 40) +
  labs(
    x = "Miles per gallon fuel consumption",
    size = "Horsepower",
    color = "Number of cylinders"
  ) +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

```

#### **Reflection Questions:** 

#### **In this assignment, you wrote functions that operate on vectors (Exercises 1 and 2) and manipulated a data frame to create a plot (Exercise 3). Explain the difference between a simple character vector (like the one for singers) and a factor (like the model column). Why was it necessary to treat the model column as a factor and reorder its levels to create the final plot?**

-   Character vector is a sequence of text strings with no grouping or ordering

-   Factor is a categorical variable with order

-   I need to reorder the model column by mpg so that car models appear sorted by fuel efficiency on the y-axis. ggplot2 will display model alphabetically, not mpg, if it stays as a character vector. \

#### **Identify one of the three exercises where you used an AI assistant to help generate or debug a chunk of code. Provide the specific prompt you used. Then, show the code before you finalized it (e.g., the AI's initial suggestion or your first attempt) and the final, working code. In your commentary, explain what was missing or incorrect in the "before" version and what you learned by testing and correcting it to produce the final version.**

-   Exercise 3

-   Prompt: "Remove the y-axis using the theme() function and incorporate that into my current R script"

-   Before AI:

    library(tidyverse)

    mtcars_tbl \<- as_tibble(mtcars, rownames = "model") \|\> mutate(model = fct_reorder(model, mpg), cyl = as_factor(cyl))

    ggplot(mtcars_tbl, mapping = aes(x = mpg, y = model)) +

    geom_point(aes(size = hp, color = cyl)) +

    geom_text(aes(label = model), hjust = -0.1, size = 3) +

    xlim(10, 40) +

    labs( x = "Miles per gallon fuel consumption", size = "Horsepower", color = "Number of cylinders" )

-   After AI:

    library(tidyverse)

    mtcars_tbl \<- as_tibble(mtcars, rownames = "model") \|\> mutate(model = fct_reorder(model, mpg), cyl = as_factor(cyl))

    ggplot(mtcars_tbl, mapping = aes(x = mpg, y = model)) +

    geom_point(aes(size = hp, color = cyl)) +

    geom_text(aes(label = model), hjust = -0.1, size = 3) +

    xlim(10, 40) +

    labs( x = "Miles per gallon fuel consumption", size = "Horsepower", color = "Number of cylinders" ) +

    theme( axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
