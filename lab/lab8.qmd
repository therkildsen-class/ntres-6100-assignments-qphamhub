---
title: "lab8"
format: github_document
editor: visual
---

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

## Exercise 1: Optimize for loops (40 minutes)

```{r}
#First appraoch 
x <- 1:10
y <- 11:20
z <- NULL
for (i in 1:length(x)){
  z <- c(z, x[i] + y[i])
}
z

system.time(for (i in 1:length(x)){
  z <- c(z, x[i] + y[i])
})

#Second approach
x <- 1:10
y <- 11:20
z <- vector(mode = "double", length=10)
for (i in 1:length(x)){
  z[i] <- x[i] + y[i]
}
z
system.time(for (i in 1:length(x)){
  z[i] <- x[i] + y[i]
})

#Test efficiency 
n_iterations <- (1:5)*5000
approach_1 <- vector("double", length(n_iterations))
approach_2 <- vector("double", length(n_iterations))

for (i in 1:length(n_iterations)){
  n <- n_iterations[i]
  vector_of_1 <- NULL
  approach_1[i] <- system.time(
    for (j in 1:n){
      vector_of_1 <- c(vector_of_1, 1)
    }
  )[3]
  
  ###Approach 2
  vector_of_1 <- vector(mode = "double", length=n)
  approach_2[i] <- system.time(
    for (j in 1:n){
      vector_of_1[j] <- 1
    }
  )[3]
}

tibble(n_iterations, approach_1, approach_2) |>
  pivot_longer(2:3, names_to = "approach", values_to = "runtime") |>
  ggplot(aes(x=n_iterations, y=runtime, color=approach)) +
  geom_line()

```

## Exercise 2: Infinite monkey theorem and Markov Chain Monte Carlo simulation (50 minutes)

```{r}
set<-c(letters, " ", ",", "!")
i <- 1
n <- 1000
set.seed(42)
for (i in 1:n){
  if(i==1){
    current_letter <- sample(LETTERS, 1)
    hysterical_monkey <- current_letter
  } else {
    if(last_letter == "!" & i != n){
      current_letter <- str_c(" ", sample(LETTERS, 1))
    } else if(last_letter == "," & i != n){
      current_letter <- str_c(" ", sample(letters, 1))
    } else if(last_letter %in% c(",", "!") & i == n){
      current_letter <- " "
    } else if(last_letter == " "){
      current_letter <- sample(letters, 1)
    } else if (str_count(last_letter) == 2){
      current_letter <- ""
    } else {
      current_letter <- sample(set, 1)
    }
    hysterical_monkey <- str_c(hysterical_monkey, current_letter)
  }
  last_letter <- current_letter
}

```

